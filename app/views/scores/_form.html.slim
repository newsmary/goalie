/= form_for(@score, url: goal_scores_path(@goal,@score), html: { class: "form-horizontal", role: "form" }) do |f|
- max_word_count = 50
/ul#errorBox.alert.alert-danger.alert-dismissable style="display: none"

= form_with(model: [@goal,@score], local: true, html: { xonsubmit: "return validate()", name: "daForm", id: "daForm", class: "form-horizontal", role: "form"}) do |f|
  - if @score.errors.any?
    .alert.alert-danger.alert-dismissable role="alert"
      button.close type="button" data-dismiss="alert"
        span aria-hidden="true"
          | &times;
        span.sr-only
          | Close
      h4= "#{pluralize(@score.errors.count,"error")} prohibited this score from being saved:"
      ul
        - @score.errors.full_messages.each do |msg|
          li= msg
  /.form-group
  /
    .form-group  style="margin-top: 7px"
      = f.label "Team", class: "col-sm-2 control-label"
      .col-sm-10
        p = @score.goal.team.present? ? @score.goal.team.name : "Not assigned to a team"
  .form-group
    = f.label :confidence, class: "col-sm-2 control-label"
    .col-sm-10
      = f.text_field :confidence, class: "form-control bignum", style: "display:inline"
      .bignum_suffix %
      br
      .form-hint How confident (out of 100) are you that this #{@goal.type} will be achieved as written? A 0 indicates there's not a chance while 100 means it absolutely will be delivered or already has been.
  .form-group
    = f.label :completion, class: "col-sm-2 control-label"
    .col-sm-10
      = f.text_field :amount, class: "form-control bignum", style: "display:inline"
      .bignum_suffix %
      br
      .form-hint An integer to represent (roughly) how much of this #{@goal.type} has now been delivered.
  .form-group
    = f.label :status, class: "col-sm-2 control-label"
    .col-sm-10
      - Status.all.each do |status|
          label.block-label for="radio-inline-#{status.id}" style="background: #{status.hex_color}; color: #fff"
            /=f.radio_button :goal_status, key %>
            -if (@score.status == status)
              input title="#{status.description}" onclick="toggleLessonsLearned('#{status.name}')" id="radio-inline-#{status.id}" type="radio" checked="true" name="score[status_id]" value="#{status.id}" #{status.name.humanize.capitalize}
            - else
              input title="#{status.description}" onclick="toggleLessonsLearned('#{status.name}')" id="radio-inline-#{status.id}" type="radio" name="score[status_id]" value="#{status.id}" #{status.name.humanize.capitalize}
      br style="clear:both"
        .pull-right
        	= link_to "What do these statuses mean?", "javascript:$('#status_expo').slideToggle()"
      #status_expo style="display: none"
        table.table.table-striped style="margin-top: 2rem;"
          - Status.all.each do |status|
            tr
              td style="color: #fff; background: #{status.hex_color}"
                b =status.name
              td
                =status.description
        - if is_admin?
          .pull-right
            =link_to "Edit statuses", statuses_path
  #reason.form-group
    = f.label :Comments, class: "col-sm-2 control-label"
    .col-sm-10
      = f.text_area :reason, class: "form-control bigtext", xonKeyUp: "wordsLeft(this,'#reason .words-left')"
      .form-hint Major achievements, setbacks, risks, or issues. Line breaks will be preserved.
      /Limit #{max_word_count} words.
      /.words-left


  #learnings.form-group style="#{"display: none" unless @score.status.require_learnings?}"
    = f.label 'Lessons learned', class: "col-sm-2 control-label"
    .col-sm-10
      = f.text_area :learnings, class: "form-control bigtext", onKeyUp: "wordsLeft(this,'#learnings .words-left')"
      .form-hint Please share what you've learned by working on this #{@goal.type}. What will you do differently in the future?
      /#{max_word_count} words max.
      /.words-left

  .form-group
    .col-sm-offset-2.col-sm-10
      /ul#errorBox.alert.alert-danger.alert-dismissable style="display: none"
      =f.hidden_field :goal_id, :value=>@score.goal.id
      = f.submit name: :submit, id: :submit_button, class: "btn btn-primary", value: "Save", data: { disable_with: "Please wait..." }
      br
      br
      .cancel
        =link_to :Cancel, goal_path(@score.goal)

  // Pretty hacky...
  // binding specific functionality to customisable status types is very brittle and
  // means we may as well not allow users to customise status names...
  javascript:
    function wordsLeft(field, feedback_div) {
      maxWords = #{max_word_count};
      howMany = field.value.trim().split(" ").length;
      $(feedback_div).text(maxWords - howMany + " words left.");
      if(howMany > maxWords) {
        $(feedback_div).css("color","#f00");
        return(false);
      }
    }

    //skip for now since phantomjs can't test
    function validate() {
      elements = document.forms['daForm'];

      amount = elements['score[amount]'].value;

      if (amount > 10000) {
        alert("Come on... really? That's a huge number... Don't be a weenie.");
        //elements['submit'].disabled = false;
        //elements['submit'].value = "Save";
        button = $('#submit_button');
        //$.rails.enableElement(button);
        //button.removeAttr('disabled');
        return(false);
      }

      if (amount < 0) {
        alert("Uh.... you did less than zero against this #{@goal.type} ? That sounds pretty bad. We should talk. Wanna try again?");
        elements['submit'].disabled = false;
        elements['submit'].value = "Save";
        return(false);
      }

      learnings = elements['score[learnings]'].value;
      //array of status ID's requiring learnings
      require_learnings = [#{Status.where("require_learnings = true").pluck(:id).join(",").to_s}]
      status_id = parseInt(elements['score[status_id]'].value)

      //phantom JS doesn't know Array.includes :(
      if(require_learnings.includes(status_id) && learnings == "" ) {
        alert("Please tell us what you've learned.")
        return(false);
      }

      return(true);
    }

    function setupValidation() {
      $("#daForm").validate({
        debug: false,
        /*errorLabelContainer: "#errorBox",*/
        wrapper: "div",
        //wrapper-class: "alert alert-danger",
        rules: {
          "score[amount]": { digits: true, required: true, minlength: 1, maxlength: 3},
          "score[confidence]": { digits: true, required: true, minlength: 1, maxlength: 3},
          "score[reason]": { required: true}
        },
        messages: {
          "score[amount]" :
            { maxlength: "Uhhh...I know we like to overdeliver and all but that's a really colossal number. Try again?",
            digits: "That's a weird looking percentage..." },
          "score[reason]" :
            { required: "Please describe how things are going..."}
        }
      });
    }
    $(document).ready(setupValidation);
    $(document).on('page:load', setupValidation);

    function toggleLessonsLearned(name) {
      //open the panel if the status name matches the name of a status which requires "lessons learned"
      if(name.match(/#{Status.where("require_learnings = true").pluck("name").join("|")}/)) {
        //alert('tell me your lessons....');
        $('#learnings').fadeIn();
      }else {
        $('#learnings').fadeOut();
        //nah leave it there
        //document.forms['daForm'].elements['score[learnings]'].value = "";
      }
    }
